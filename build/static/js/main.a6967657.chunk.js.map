{"version":3,"sources":["theme/colors.js","theme/images.js","images/logoPoke.png","components/Images.jsx","components/Containers.jsx","components/List.jsx","components/Card.jsx","components/Modals.jsx","components/Header.jsx","graphql/pokemon.js","pages/ListPokemon.jsx","App.js","reportWebVitals.js","index.js"],"names":["colors","colorOne","colorTwo","colorThree","colorFour","backgroundContainerColor1","backgroundContainerColor2","buttonColor1","buttonColor2","buttonTextColor","buttonHoverColor","buttonHoverTextColor","Images","LogoPoke","ImgLogoComp","styled","img","ImgLogo","props","src","RootContainerComp","div","RootContainer","children","ContainereComp","Color","Container","GridViewComp","GridView","type","fire","grass","electric","water","ground","rock","fairy","poison","bug","dragon","psychic","flying","fighting","normal","ice","generateCardBackgroundColor","p","ModalComp","ModalContentComp","ModalDetailPoke","HeaderHomeComp","nav","HeaderHome","client","ApolloClient","uri","process","cache","InMemoryCache","fetchListPokemon","a","Promise","resolve","reject","query","gql","then","res","data","pokemons","catch","err","console","log","ListPokemon","React","useState","setData","setNextUrl","setPrevUrl","setIsRequest","getPokemonData","pokemon","all","map","r","fetch","url","json","useEffect","next","previous","results","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6967657.chunk.js","sourcesContent":["const colors ={\n    colorOne:'#ffff',\n    colorTwo:'#96d47f',\n    colorThree:'#da67a8',\n    colorFour:'#daf1e4',\n    backgroundContainerColor1:'#47837b',\n    backgroundContainerColor2:'#75cb9c',\n    buttonColor1:'#4d876f',\n    buttonColor2:'#32858d',\n    buttonTextColor:'',\n    buttonHoverColor:'',\n    buttonHoverTextColor:''\n}\n\nexport default  colors","import logo from  '../images/logoPoke.png'\nconst Images ={\n   LogoPoke:logo\n}\n\nexport default Images","export default __webpack_public_path__ + \"static/media/logoPoke.d07ac06b.png\";","import styled from  '@emotion/styled'\nimport {Color} from  '../theme'\n\n// # Mobile\n// only screen and (min-width: 3600px)\n\n// # Tablet\n// only screen and (min-width: 768px)\n\n// # Desktop\n// only screen and (min-width: 992px)\n\n// # Huge\n// only screen and (min-width: 1280px)\n\nconst ImgLogoComp=styled.img`\n    display:block;\n    margin-left:auto;\n    margin-right:auto;\n    @media only screen and (min-width: 360px){\n        width:200px;\n    }\n    @media only screen and (min-width: 768px){\n        width:100px;\n    }\n    @media  only screen and (min-width: 992px){\n        width:60px;\n    }\n    @media only screen and (min-width: 1280px){\n        width:60px;\n    }\n`\nexport const ImgLogo = (props)=>{\n    return(<ImgLogoComp src={props.src}/>)\n}\n\n\n\n","import styled from  '@emotion/styled'\nimport {Color} from  '../theme'\n\nconst RootContainerComp=styled.div`\n  padding:0px;\n  margin:0px;\n  display:block;\n  width:100%;\n  heigth: 100vh;\n`\nexport const RootContainer = (props)=>{\n    return(\n        <RootContainerComp>\n            {(props.children)}\n        </RootContainerComp>\n\n    )\n}\n\nconst ContainereComp=styled.div`\n    width:800px;\n    heigth: 100vh;\n    margin:0px auto;\n    background: linear-gradient(0deg, ${Color.colorTwo} 35%, ${Color.backgroundContainerColor2} 100%);\n    box-sizing:border-box;\n    @media only screen and (min-width: 360px){\n\n    }\n    @media only screen and (min-width: 768px){\n\n    }\n    @media  only screen and (min-width: 992px){\n\n    }\n    @media only screen and (min-width: 1280px){\n\n    }\n`\n\nexport const Container = (props) =>{\n    return(\n        <ContainereComp>\n            {(props.children)}\n        </ContainereComp>\n    )\n}\n\n\n","import styled from  '@emotion/styled'\nimport {Color} from  '../theme'\n\n// # Mobile\n// only screen and (min-width: 3600px)\n\n// # Tablet\n// only screen and (min-width: 768px)\n\n// # Desktop\n// only screen and (min-width: 992px)\n\n// # Huge\n// only screen and (min-width: 1280px)\n\nconst GridViewComp=styled.div`\n    display:block;\n    margin-top:90px;\n    @media only screen and (min-width: 360px){\n\n    }\n    @media only screen and (min-width: 768px){\n\n    }\n    @media  only screen and (min-width: 992px){\n\n    }\n    @media only screen and (min-width: 1280px){\n\n    }\n`\nexport const GridView = (props)=>{\n   return(\n       <GridViewComp>\n           {(props.children)}\n       </GridViewComp>\n   )\n}\n\n\n\n","import styled from  '@emotion/styled'\nimport {Color} from  '../theme'\n\n// # Mobile\n// only screen and (min-width: 3600px)\n\n// # Tablet\n// only screen and (min-width: 768px)\n\n// # Desktop\n// only screen and (min-width: 992px)\n\n// # Huge\n// only screen and (min-width: 1280px)\n\nfunction generateCardBackgroundColor(type){\n    const colors = {\n        fire: '#FDDFDF',\n        grass: '#DEFDE0',\n        electric: '#FCF7DE',\n        water: '#DEF3FD',\n        ground: '#f4e7da',\n        rock: '#d5d5d4',\n        fairy: '#fceaff',\n        poison: '#98d7a5',\n        bug: '#f8d5a3',\n        dragon: '#97b3e6',\n        psychic: '#eaeda1',\n        flying: '#F5F5F5',\n        fighting: '#E6E0D4',\n        normal: '#F5F5F5',\n        ice:'#3fd0d4',\n        psychic:'#49804b',\n        steel:'#9fa19f',\n        ghost:'#695282',\n        dark: '#200142',\n        shadow:'#30385c',\n        unknown:'#a3a3a3',\n    };\n\n\n    return type ? colors[type] : '#ffff'\n}\nconst CardViewComp=styled.div`\n    box-sizing:border-box;\n    font-family: 'Yusei Magic', sans-serif;\n    display:inline-block;\n    text-align:center;\n    border-radius:5vh;\n    width:246px;\n    min-height:300px;\n    overflow:hidden;\n    margin:10px;\n    padding:10px;\n    background:${props=>generateCardBackgroundColor(props.type)};\n    @media only screen and (min-width: 360px){\n        -webkit-box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.75);\n        -moz-box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.75);\n        box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.75);\n    }\n    @media only screen and (min-width: 768px){\n\n    }\n    @media  only screen and (min-width: 992px){\n\n    }\n    @media only screen and (min-width: 1280px){\n\n    }\n    &:hover {\n        cursor: pointer;\n        opacity: 0.3;\n        // cursor: url(your-image-path.png), auto; ganti cursor\n        // img{\n        //     width:100%;\n        // }\n        // p{\n        //     position:fixed;\n        // }\n    }\n`\nconst CardImageComp=styled.img`\n    width:90%;\n`\nconst CardNameComp=styled.p`\n    font-size:20pt;\n    font-weight:bold;\n    display:block;\n    marrgin:0;\n    border-radius:2vh;\n    background:${Color.colorFour}\n`\n\nexport const CardPokemon = (props)=>{\n   return(\n       <CardViewComp type={props.type}>\n           <div style={{margin:'auto',marginTop:20,width:'70%',background:'rgba(255, 255, 255, 0.6)',borderRadius:'1000vh'}}>\n                <CardImageComp src={props.pokeImg}/>\n           </div>\n           <CardNameComp>{props.pokeName}</CardNameComp>\n           <p style={{fontWeight:'bold'}}>Type: {props.type}</p>\n       </CardViewComp>\n   )\n}\n\n\n\n","import styled from  '@emotion/styled'\nimport {Color} from  '../theme'\n\n// # Mobile\n// only screen and (min-width: 3600px)\n\n// # Tablet\n// only screen and (min-width: 768px)\n\n// # Desktop\n// only screen and (min-width: 992px)\n\n// # Huge\n// only screen and (min-width: 1280px)\n\nconst ModalComp=styled.div`\n    display: none;\n    position: fixed;\n    z-index: 1;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    background-color: rgb(0,0,0);\n    background-color: rgba(0,0,0,0.4);\n    @media only screen and (min-width: 360px){\n\n    }\n    @media only screen and (min-width: 768px){\n\n    }\n    @media  only screen and (min-width: 992px){\n\n    }\n    @media only screen and (min-width: 1280px){\n\n    }\n`\nconst ModalContentComp=styled.div`\n    background-color: #fefefe;\n    margin: 15% auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 80%;\n\n`\nexport const ModalDetailPoke = (props)=>{\n   return(\n       <ModalComp>\n           <ModalContentComp/>\n       </ModalComp>\n   )\n}\n\n\n\n","import styled from  '@emotion/styled'\nimport {Color} from  '../theme'\n\n// # Mobile\n// only screen and (min-width: 3600px)\n\n// # Tablet\n// only screen and (min-width: 768px)\n\n// # Desktop\n// only screen and (min-width: 992px)\n\n// # Huge\n// only screen and (min-width: 1280px)\n\nconst HeaderHomeComp=styled.nav`\n    width:100%;\n    background:${Color.backgroundContainerColor2};\n    box-sizing:border-box;\n    padding:30px 0px;\n    position:fixed;\n    border-bottom-left-radius:5vh;\n    border-bottom-right-radius:5vh;\n`\nexport const HeaderHome = (props)=>{\n    return(\n        <HeaderHomeComp>\n            {(props.children)}\n        </HeaderHomeComp>\n    )\n}\n\n\n\n","import { gql } from '@apollo/client';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n    uri: process.env.REACT_APP_BACKEND_BASE_URL,\n    cache: new InMemoryCache()\n  });\n\nconst pokemonData = async(pokemon) =>{\n    let dataPokemon=pokemon\n    let dataShaped=[]\n    // append type data\n    new Promise.all(\n        dataPokemon.map(async r=>{\n        await fetch(r.url)\n        .then(res=>res.json())\n        .then(async details=>{\n            let row = {...r}\n            row.types=details.types\n            dataShaped.push(row)\n        })\n    }))\n\n}\n\nexport const fetchListPokemon = async() =>{\n   try{\n        return new Promise((resolve,reject)=>{\n                        client.query({\n                            query: gql`\n                                query{\n                                    pokemons(limit:20){\n                                        next\n                                        previous\n                                        count\n                                        status\n                                        results{\n                                            url\n                                        }\n                                    }\n                                }\n                            `\n                        })\n                        .then(res=>resolve(res.data.pokemons))\n                        .catch(err=>reject(err))\n\n\n                    })\n\n\n   }catch(err){\n       console.log('Error>>>>',err);\n   }\n\n}","import React,{useEffect} from 'react'\n\n//themes\nimport {ImgLogo} from '../components/Images'\nimport {Images} from '../theme'\n//components\nimport {Container} from '../components/Containers'\nimport {GridView} from '../components/List'\nimport {CardPokemon} from '../components/Card'\nimport {ModalDetailPoke} from '../components/Modals'\nimport {HeaderHome} from '../components/Header'\n\n//service\nimport {fetchListPokemon} from '../graphql/pokemon'\n\n\nfunction ListPokemon(){\n  const [data,setData] = React.useState([])\n  const [nextUrl,setNextUrl] = React.useState([])\n  const [prevUrl,setPrevUrl] = React.useState([])\n  const [totalAll,setTotalAll] = React.useState(0)\n  const [isRequest,setIsRequest] = React.useState(false)\n\n  const getPokemonData = async(pokemon) =>{\n    return await Promise.all(\n        pokemon.map(async r=>{\n            return await fetch(r.url).then(res=>res.json())\n        })\n    )\n  }\n\n  useEffect(()=>{\n    setIsRequest(true)\n    fetchListPokemon()\n    .then(async data=>{\n        setNextUrl(data.next)\n        setPrevUrl(data.previous)\n        await setData(await getPokemonData(data.results))\n        setIsRequest(false)\n    })\n  },[])\n    return(\n        <Container>\n            <ModalDetailPoke/>\n            <HeaderHome>\n                <ImgLogo src={Images.LogoPoke}/>\n            </HeaderHome>\n            <br/>\n            <br/>\n            <GridView>\n                {/* {data.map(res=>(\n                    <CardPokemon key={res.id} type={res.types[0].type.name} pokeName={res.name} pokeImg={res.sprites.front_default ? res.sprites.front_default : res.sprites.back_default}/>\n                ))} */}\n            </GridView>\n        </Container>\n    )\n}\n\nexport default ListPokemon","import ListPokemon from './pages/ListPokemon'\nimport { RootContainer } from \"./components/Containers\";\n\n\nfunction App() {\n  return (\n    <RootContainer>\n      <ListPokemon/>\n    </RootContainer>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport \"normalize.css/normalize.css\";\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}